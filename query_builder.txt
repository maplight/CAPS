To build the database query there are several processes that occur first to build a series of subqueries.  The query itself is also executed on a smry table that just has the indexed and searchable values.

Step 1: Build the contributor name search query:
  If the All contributors button is checked no contributor name filter is built
  If the Just these contributors button is checked the data in in the text box is split into individual words and the following SQL is built from it:
    MATCH (contributions_search.DonorNameNormalized, contributions_search.DonorEmployerNormalized, contributions_search.DonorOrganization) AGAINST ('list of words' IN BOOLEAN MODE)
    -- this is a special query option only available in certain table types and with a special index.  It's a fast text search basically and I have it set to do an AND on all the words in the list - i.e. Dan Newman looks for both dan AND newman in the same field.
    -- by default mySQL will ignore any word that is less then 4 characters and treat it as a wild card, along with certain words.  I have adjusted the minimum word length to be 2 characters, but this will have to be explained in the install documentation for the state to do the same.

Step 2: Build the contributor location query
  If All states is not selected:
    contributions_search.DonorState = 'statecode'

Step 3: Candidate contributions query
  If the Candidates box is checked
    contributions_search.CandidateContribution = 'Y';

Step 4:
  If the All candidates button is selected no candidate filter is built
  If the Search candidates button is selected:
    If a candidate is NOT selected in the select candidate drop down (i.e. it says Select Candidate still) then use the search text box items and build the following SQL:
      MATCH (contributions_search.RecipientCandidateNameNormalized) AGAINST ('list of words' IN BOOLEAN MODE)
      -- see explaination of this search in Step 1
    If a candidate is selected in the select candidate drop down use this query:
      contributions_search.RecipientCandidateNameNormalized = 'selected candidate'
  If the offices selection button is selected:
    contributions_search.RecipientCandidateOffice = 'office selected'

Step 5:
  If the Ballot Measures box is checked
    contributions_search.BallotMeasureContribution = 'Y'
  If the Search propositions box has been changed and the propositions drop down has All propositions selected search on the words entered:
    MATCH (contributions_search.Target) AGAINST ('list of words' IN BOOLEAN MODE
    -- see explaination of this search in Step 1
  If the Search propositions box has not been changed and the propositions drop down box selected is an election:
    contributions_search.Election = 'election date'
          } else {
            # build query for a specific proposition
            $selected_data = explode ("#", $search_data["proposition_list"]);
            $Election = "contributions_search.Election = '" . $selected_data[0] . "'";
            $Proposition = "contributions_search.Target = '" . addslashes ($selected_data[1]) . "'";
          }
        }
      }

      # build support/oppose query
      if ($search_data["position"] == "S") {$Position = "contributions_search.Position = 'SUPPORT'";}
      if ($search_data["position"] == "O") {$Position = "contributions_search.Position = 'OPPOSE'";}

      # exclude allied committees query
      if (isset ($search_data["exclude"])) {$Allied = "contributions_search.AlliedCommittee = 'N'";}
    }


    #------------------------------------------------------------------------------------------
    # Build committe search query:
    if (isset ($search_data["committees"])) {
      # build committee search query
      if ($search_data["comm_select"] != "all") {
        foreach (str_word_count ($search_data["committee_search"], 1) as $word) {
          if (strpos ($word, "'") === false) {
            $Committee .= "+{$word} ";
          } else {
            $Committee .= "+\"" . addslashes ($word) . "\" ";
          }
        }
        if ($Committee != "") {$Committee = "MATCH (contributions_search.RecipientCommitteeNameNormalized) AGAINST ('" . $Committee . "' IN BOOLEAN MODE)";}
      } 
    }


    #------------------------------------------------------------------------------------------
    # Build dates / cycles query
    switch ($search_data["date_select"]) {
      case "range":
        # build date range query
        $DateRange = "contributions_search.TransactionDate >= '" . date ("Y-m-d", strtotime ($search_data["start_date"])) . "' AND contributions_search.TransactionDate <= '" . date ("Y-m-d", strtotime ($search_data["end_date"])) . "'";
        break;

      case "cycle":
        # build election cycle query
        if (isset ($search_data["cycles"])) {
          foreach ($search_data["cycles"] as $cycle) {
            $ElectionCycle .= "contributions_search.ElectionCycle = $cycle OR ";
          }
          $ElectionCycle = substr ($ElectionCycle, 0, -4); # Remove the final OR
        }
        break;
    }


    #------------------------------------------------------------------------------------------
    # Build sub-query components
    $donor_where = "";
    $candidate_where = "";
    $proposition_where = "";
    $committee_where = "";
    $date_where = "";

    # create donor query
    if ($Donor != "") {$donor_where .= "{$Donor} AND ";}
    if ($DonorState != "") {$donor_where .= "{$DonorState} AND ";}
    if ($donor_where != "") {$donor_where = substr ($donor_where, 0, -5);} # remove extra AND
    
    # create candidate query
    if ($CandidateList == "") {
      if ($Candidate != "") {$candidate_where .= "{$Candidate} AND ";}
    } else {
      $candidate_where .= "{$CandidateList} AND ";
    }
    if ($OfficeList != "") {$candidate_where .= "{$OfficeList} AND ";}
    if ($CandidateContribution != "") {$candidate_where .= "$CandidateContribution AND ";}
    if ($candidate_where != "") {$candidate_where = substr ($candidate_where, 0, -5);} # Remove the final AND

    # create proposition query
    if ($Proposition == "") {
      if ($PropositionSearch != "") {$proposition_where .= "{$PropositionSearch} AND ";}
    } else {
      $proposition_where .= "{$Proposition} AND ";
    }
    if ($Election != "") {$proposition_where .= "{$Election} AND ";}
    if ($Position != "") {$proposition_where .= "{$Position} AND ";}
    if ($Allied != "") {$proposition_where .= "{$Allied} AND ";}
    if ($PropositionContribution != "") {$proposition_where .= "$PropositionContribution AND ";}
    if ($proposition_where != "") {$proposition_where = substr ($proposition_where, 0, -5);} # Remove the final AND

    # create committee query
    if ($Committee != "") {$committee_where .= "{$Committee} AND ";}
    if ($committee_where != "") {$committee_where = substr ($committee_where, 0, -5);} # remove extra AND

    # create date query
    if ($DateRange != "") {$date_where .= "({$DateRange}) AND ";}
    if ($ElectionCycle != "") {$date_where .= "({$ElectionCycle}) AND ";}
    if ($date_where != "") {$date_where = substr ($date_where, 0, -5);} # remove extra AND

    # generate full query where
    $where = "";
    if ($donor_where != "") {$where .= "{$donor_where} AND ";}
    if ($candidate_where != "" && $proposition_where != "") {
      $where .= "({$candidate_where} OR {$proposition_where}) AND ";
    } else {
      if ($candidate_where != "") {$where .= "{$candidate_where} AND ";}
      if ($proposition_where != "") {$where .= "{$proposition_where} AND ";}
    }
    if ($committee_where != "") {$where .= "{$committee_where} AND ";}
    if ($date_where != "") {$where .= "{$date_where} AND ";}
    if ($where != "") {$where = "WHERE " . substr ($where, 0, -5);} # remove extra AND

    # create query
    $query = "SELECT contributions.* FROM contributions INNER JOIN contributions_search USING(id) {$where}";

    return $query;
  }

